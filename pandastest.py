

import pandas as pd
import numpy as np

s=pd.Series([1,4,-2,'home'],index=['a','b','c','d'])
#a       1
#b       4
#c      -2
#d    home
#dtype: object

#print(s.dtype)=object

data={'population':[1.5,1.2,2.0,1.4,0.8],'state':['Nevada','Florida',"ohio",'Texas','Florida'],'year':[2003,2000,2004,1990,1994]}
#{'population': [1.5, 1.2, 2.0, 1.4, 0.8], 'state': ['Nevada', 'Florida', 'ohio', 'Texas', 'Florida'], 'year': [2003, 2000, 2004, 1990, 1994]}

df=pd.DataFrame(data,index=['one','two','three','four','five'],columns=['year','state','population','debt'])
  #         year    state  population debt
  #  one    2003   Nevada         1.5  NaN
  #  two    2000  Florida         1.2  NaN
  #  three  2004     ohio         2.0  NaN
  #  four   1990    Texas         1.4  NaN
  #  five   1994  Florida         0.8  NaN

a=s[1:3]
#b     4
#c    -2
#dtype: object

b=s[0]
#1

c=s['d']
#home

d=s.values[2:]
#1

e=df[['population','state']]
#       population    state
#one           1.5   Nevada
#two           1.2  Florida
#three         2.0     ohio
#four          1.4    Texas
#five          0.8  Florida

f=df.population
#one      1.5
#two      1.2
#three    2.0
#four     1.4
#five     0.8
#Name: population, dtype: float64


g=df.iloc[1:]
#       year    state  population debt
#two    2000  Florida         1.2  NaN
#three  2004     ohio         2.0  NaN
#four   1990    Texas         1.4  NaN
#five   1994  Florida         0.8  NaN

h=df.iloc[0:4,0:5]
#h=df.iloc[2:4,2:5]
#        population debt
#three         2.0  NaN
#four          1.4  NaN

i=df.loc['one']
#year            2003
#state         Nevada
#population       1.5
#debt             NaN
#Name: one, dtype: object

j=df.debt=34.67
#34.67

k=df.debt=[df.iloc[:,2][i]*5 for i in range(0,df.shape[0])]
#[7.5, 6.0, 10.0, 7.0, 4.0]

l=df.head()
#       year    state  population  debt
#one    2003   Nevada         1.5   7.5
#two    2000  Florida         1.2   6.0
#three  2004     ohio         2.0  10.0
#four   1990    Texas         1.4   7.0
#five   1994  Florida         0.8   4.0


m=df.tail(2)
#      year    state  population  debt
#four  1990    Texas         1.4   7.0
#five  1994  Florida         0.8   4.0

n=df.sample(n=3)
#     year    state  population  debt
#four  1990    Texas         1.4   7.0
#one   2003   Nevada         1.5   7.5
#five  1994  Florida         0.8   4.0

df['newColomn']=pd.Series(np.random.randn(df.shape[0]),index=df.index)
#       year    state  population  debt  newColomn
#one    2003   Nevada         1.5   7.5   1.037903
#two    2000  Florida         1.2   6.0  -2.474019
#three  2004     ohio         2.0  10.0   1.397380
#four   1990    Texas         1.4   7.0   1.308764
#five   1994  Florida         0.8   4.0  -1.111915

df.drop_duplicates('state')
#       year    state  population  debt  newColomn
#one    2003   Nevada         1.5   7.5   1.037903
#two    2000  Florida         1.2   6.0  -2.474019
#three  2004     ohio         2.0  10.0   1.397380
#four   1990    Texas         1.4   7.0   1.308764

df.state
#one       Nevada
#two      Florida
#three       ohio
#four       Texas
#five     Florida
#3Name: state, dtype: object


pd.read_csv('sampleDataSet.csv')
#    5.1  0.222222222       3.5  ...   0.2  0.041666667     setosa
#0   4.9     0.166667  3.000000  ...  0.20  0.041666667     setosa
#1   4.7     0.111111  3.200000  ...  0.20  0.041666667     setosa
#2   4.6     0.083333  3.100000  ...  0.20  0.041666667     setosa
#3   NaN     0.194444  3.600000  ...  0.20  0.041666667     setosa
#4   NaN     0.305556  3.900000  ...  0.40        0.125     setosa
#..  ...          ...       ...  ...   ...          ...        ...
#94  7.2     0.805556  3.000000  ...  1.60        0.625  virginica
#95  7.4          NaN  0.333333  ...  0.75    virginica        NaN
#96  7.9     0.999900  3.800000  ...  2.00  0.791666667  virginica
#97  6.4     0.583333  2.800000  ...  2.20        0.875  virginica
#98  6.3     0.555556  2.800000  ...  1.50  0.583333333  virginica

#[99 rows x 9 columns]
df=pd.read_csv("sampleDataSet.csv",names=["a","b","c","d","e","f","g","h","i"])
#      a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]

#When consider abouth the shape of the data frame without setting name there isnt any
#column. so it just read all the data beause of that it get 99 colimns.But after
#setting the names ,column names are set.So it get all 100 rows

a=df.isnull().g
#0     False
#1     False
#2     False
#3     False
#4     False
#      ...  
#95    False
#96    False
#97    False
#98    False
#99    False
#Name: g, Length: 100, dtype: bool

b=df.isnull().sum(0)
#a    4
#b    1
#c    0
#d    3
#e    2
#f    2
#g    1
#h    1
#i    1
#dtype: int64

c=df=df[df.isnull().a != True]
#     a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[96 rows x 9 columns]

d=df.dropna(axis=0).isnull().sum()
#a    0
#b    0
#c    0
#d    0
#e    0
#f    0
#g    0
#h    0
#i    0
#dtype: int64

e=df.dropna(axis=1)
#           c
#0   3.500000
#1   3.000000
#2   3.200000
#3   3.100000
#4   3.600000
#..       ...
#95  3.000000
#96  0.333333
#97  3.800000
#98  2.800000
#99  2.800000
#[100 rows x 1 columns]

f=df.dropna(axis=1, how='all')
#      a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#398  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#399  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]

g=df.dropna(axis=1, thresh=1)
#      a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]

h=df.drop('i',axis=1)
#      a         b         c         d         e         f     g            h
#0   5.1  0.222222  3.500000  0.625000  1.400000  0.067797  0.20  0.041666667
#1   4.9  0.166667  3.000000  0.416667  1.400000  0.067797  0.20  0.041666667
#2   4.7  0.111111  3.200000  0.500000  1.300000       NaN  0.20  0.041666667
#3   4.6  0.083333  3.100000  0.458333  1.500000  0.084746  0.20  0.041666667
#4   NaN  0.194444  3.600000  0.666667  1.400000       NaN  0.20  0.041666667
#..  ...       ...       ...       ...       ...       ...   ...          ...
#95  7.2  0.805556  3.000000  0.416667  5.800000  0.813559  1.60        0.625
#96  7.4       NaN  0.333333  6.100000  0.864407  1.900000  0.75    virginica
#97  7.9  0.999900  3.800000  0.750000  6.400000  0.915254  2.00  0.791666667
#98  6.4  0.583333  2.800000  0.333333  5.600000  0.779661  2.20        0.875
#99  6.3  0.555556  2.800000  0.333333  5.100000  0.694915  1.50  0.583333333
#
#[100 rows x 8 columns]

i=df.fillna(899)
#        a           b         c  ...     g            h          i
#0     5.1    0.222222  3.500000  ...  0.20  0.041666667     setosa
#1     4.9    0.166667  3.000000  ...  0.20  0.041666667     setosa
#2     4.7    0.111111  3.200000  ...  0.20  0.041666667     setosa
#3     4.6    0.083333  3.100000  ...  0.20  0.041666667     setosa
#4   899.0    0.194444  3.600000  ...  0.20  0.041666667     setosa
#..    ...         ...       ...  ...   ...          ...        ...
#95    7.2    0.805556  3.000000  ...  1.60        0.625  virginica
#96    7.4  899.000000  0.333333  ...  0.75    virginica        899
#97    7.9    0.999900  3.800000  ...  2.00  0.791666667  virginica
#98    6.4    0.583333  2.800000  ...  2.20        0.875  virginica
#99    6.3    0.555556  2.800000  ...  1.50  0.583333333  virginica

#[100 rows x 9 columns]

j=df.fillna(method='ffill')
#      a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...  0.067797  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4   4.6  0.194444  3.600000  0.666667  ...  0.084746  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4  0.805556  0.333333  6.100000  ...  1.900000  0.75    virginica  virginica
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]

k=df.replace(6.3,600)
#        a         b         c         d  ...         f     g            h          i
#0     5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1     4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2     4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3     4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4     NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
#..    ...       ...       ...       ...  ...       ...   ...          ...        ...
#95    7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96    7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97    7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98    6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  600.0  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]

l=df.replace('.',np.nan)
#      a         b         c         d  ...         f     g            h          i
#0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
#1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
#2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
#3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
#4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
#..  ...       ...       ...       ...  ...       ...   ...          ...        ...
#95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
#96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
#97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
#98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
#99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

#[100 rows x 9 columns]


#m=df[np.random.rand(df.shape[0]>0.5)]=1.5

#Functions.........................................................

q=lambda df: df.max()-df.min()
#q(df)
#a    3.600000
#b    0.989900
#c    4.066667
#d    6.090000
#e    6.035593
#f    1.890000
#g    2.400000
#dtype: float64

def f(x):
    return x.max()-x.min()
q(df)
#a    3.600000
#b    0.989900
#c    4.066667
#d    6.090000
#e    6.035593
#f    1.890000
#g    2.400000
#dtype: float64

df.iloc[: ,3:5].apply(f)
#d    6.090000
#e    6.035593
#dtype: float64

#Group by............................................................

grouped=df[['a','b','e']].groupby(df['i'])
#>>> grouped.mean()
#                   a         b         e
#i                                       
#setosa      5.034483  0.203437  1.474194
#versicolor  6.026471  0.479575  4.315152
#virginica   6.625000  0.641411  5.612121

grouped=df[['a','b','e']].groupby([df['i'],df['c']]).mean()
#>>> grouped
#                       a         b         e
#i          c                                
#setosa     2.9  4.400000  0.027778  1.400000
#           3.0  4.750000  0.127500  1.375000
#           3.1  4.766667  0.129630  1.533333
#           3.2  4.700000  0.111111  1.450000
#           3.3  5.100000  0.222222  1.700000
#           3.4  5.085714  0.201389  1.571429
#           3.5  5.133333  0.231481  1.433333
#           3.6  4.600000  0.138889  1.200000
#           3.7  5.250000  0.263889  1.500000
#           3.8  5.400000  0.305556  1.600000
#           3.9  5.400000  0.305556  1.500000
#           4.0  5.800000  0.416667  1.200000
#           4.4  5.700000  0.388889  1.500000
#versicolor 2.0  5.000000  0.194444  3.500000
#           2.2  6.100000  0.500000  4.250000
#           2.3  5.500000  0.333333  4.000000
#           2.4  5.300000  0.277778  3.600000
#           2.5  5.950000  0.458333  4.400000
#           2.6  5.700000  0.388889  3.500000
#           2.7  5.700000  0.388889  4.300000
#           2.8  6.240000  0.538889  4.520000
#           2.9  6.140000  0.511111  4.340000
#           3.0  6.200000  0.527778  4.525000
#           3.1  6.800000  0.694444  4.650000
#           3.2  6.433333  0.592593  4.666667
#           3.3  6.300000  0.555556  4.700000
#virginica  2.2  6.000000  0.472222  5.000000
#           2.5  5.766667  0.407407  5.100000
#           2.6  7.700000  0.944444  6.900000
#           2.7  6.166667  0.518519  5.100000
#           2.8  6.342857  0.567460  5.400000
#           2.9  6.800000  0.694444  5.950000
#           3.0  6.950000  0.702381  5.714286
#           3.2  6.750000  0.680556  5.525000
#           3.3  6.500000  0.611111  5.850000
#           3.6  7.200000  0.805556  6.100000
#           3.8  7.800000  0.972172  6.550000

grouped.unstack()
#               a                                 ...    e                     
#c            2.9   3.0       3.1       3.2  3.3  ...  2.4  2.5  2.6  2.7   2.8
#i                                                ...                          
#setosa      4.40  4.75  4.766667  4.700000  5.1  ...  NaN  NaN  NaN  NaN   NaN
#versicolor  6.14  6.20  6.800000  6.433333  6.3  ...  3.6  4.4  3.5  4.3  4.52
#virginica   6.80  6.95       NaN  6.750000  6.5  ...  NaN  5.1  6.9  5.1  5.40
#
#[3 rows x 63 columns]

#Data Summarizing...........................................................

 df['a'].nunique()
#33

df['a'].value_counts()
#6.4    6
#6.3    6
#5.8    5
#5.7    5
#5.1    5
#5.0    4
#6.5    4
#6.0    4
#5.4    4
#5.6    4
#4.8    4
#4.9    4
#6.7    4
#5.2    3
#5.5    3
#7.7    3
#6.1    3
#7.2    3
#6.8    2
#4.6    2
#6.6    2
#5.9    2
#4.7    2
#6.9    2
#6.2    2
#7.6    1
#7.0    1
#4.4    1
#7.4    1
#7.1    1
#7.9    1
#4.3    1
#7.3    1
#Name: a, dtype: int64

df.describe()
#               a          b           c  ...          e          f          g
#count  96.000000  99.000000  100.000000  ...  98.000000  98.000000  99.000000
#mean    5.940625   0.444264    3.016333  ...   3.818004   0.502540   1.200505
#std     0.856502   0.235225    0.515756  ...   1.799759   0.329349   0.747462
#min     4.300000   0.010000    0.333333  ...   0.864407   0.010000   0.100000
#25%     5.200000   0.236111    2.800000  ...   1.600000   0.105932   0.350000
#50%     5.900000   0.416667    3.000000  ...   4.500000   0.593220   1.400000
#75%     6.500000   0.597222    3.300000  ...   5.100000   0.694915   1.800000
#max     7.900000   0.999900    4.400000  ...   6.900000   1.900000   2.500000

#[8 rows x 7 columns]

>>> df.mean()
#a    5.940625
#b    0.444264
#c    3.016333
#d    0.490394
#e    3.818004
#f    0.502540
#g    1.200505
#dtype: float64

 df.sort_index().head()
#     a         b    c         d    e         f    g            h       i
#0  5.1  0.222222  3.5  0.625000  1.4  0.067797  0.2  0.041666667  setosa
#1  4.9  0.166667  3.0  0.416667  1.4  0.067797  0.2  0.041666667  setosa
#2  4.7  0.111111  3.2  0.500000  1.3       NaN  0.2  0.041666667  setosa
#3  4.6  0.083333  3.1  0.458333  1.5  0.084746  0.2  0.041666667  setosa
#4  NaN  0.194444  3.6  0.666667  1.4       NaN  0.2  0.041666667  setosa

#4.3 Try out

import numpy as np
import pandas as pd
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt

df=pd.read_csv('lab02Exercise01.csv',names=["Chanel1","Chanel2","Chanel3","Chanel4","Chanel5"])

for x in ["Chanel1","Chanel2","Chanel3","Chanel4","Chanel5"]:
   mean_value1=df[x].mean()
   df[x]=df[x].fillna(mean_value1)

scatter_matrix(df , alpha =0.2 , figsize =(6, 6),diagonal='kde')
plt.show()

arr=np.zeros(23998,dtype=str)
for i in range(23998):
    if ((df["Chanel1"][i]+df["Chanel5"][i])/2)<((df["Chanel2"][i]+df["Chanel3"][i]+df["Chanel4"][i])/3):
        arr[i]='1'
    else:
        arr[i]='0'



df["class"]=arr




